# guide_spb.py

import asyncio
import datetime

import requests
from bs4 import BeautifulSoup
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback

router = Router(name="guide_spb")


@router.message(F.text == "üìç –ì–∏–¥ –ø–æ –°–ü–±")
async def guide_select_start_date(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ ¬´–ì–∏–¥ –ø–æ –°–ü–±¬ª ‚Äî
    –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.
    """
    # –æ—á–∏—â–∞–µ–º –ø—Ä–µ–∂–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    await state.clear()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π:",
        reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()
    )


@router.callback_query(SimpleCalendarCallback.filter())
async def process_calendar(
    callback_query: types.CallbackQuery,
    callback_data: dict,
    state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é.
    –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º start_date, –∑–∞—Ç–µ–º end_date.
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–±–æ–∏—Ö –¥–∞—Ç ‚Äî –ø–∞—Ä—Å–∏–º –ê—Ñ–∏—à—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è.
    """
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if not selected:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –º–µ—Å—è—Ü/–≥–æ–¥
        return

    data = await state.get_data()

    if "start_date" not in data:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
        await state.update_data(start_date=date)
        await callback_query.message.answer(
            f"–ù–∞—á–∞–ª–æ: {date.strftime('%d.%m.%Y')}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        start_date: datetime.date = data["start_date"]
        end_date: datetime.date = date
        await state.clear()
        await callback_query.message.answer(
            f"–í—ã–±—Ä–∞–Ω—ã –¥–∞—Ç—ã: {start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}",
            reply_markup=ReplyKeyboardRemove()
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å loop
        events = await asyncio.to_thread(parse_afisha, start_date, end_date)

        if not events:
            await callback_query.message.answer("–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–∞—Ç–∞–º.")
            return

        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        for ev in events:
            lines = [
                f"<b>{ev['title']}</b>",
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ev['category']}",
                f"–î–∞—Ç–∞ / –º–µ—Å—Ç–æ: {ev['notice'] or '‚Äî'}",
                f"–¶–µ–Ω–∞: {ev['price']}",
                f"–†–µ–π—Ç–∏–Ω–≥: {ev['rating']}",
            ]
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–ø—É—Å—Ç–∞—è
            if ev.get("link"):
                lines.append(f"<a href=\"{ev['link']}\">–°—Å—ã–ª–∫–∞</a>")

            text = "\n".join(lines)
            await callback_query.message.answer(text, disable_web_page_preview=True)


def parse_afisha(start_date: datetime.date, end_date: datetime.date) -> list[dict]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å–æ–±—ã—Ç–∏–π —Å afisha.ru –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–ª—è–º–∏:
    title, link, price, rating, category, notice.
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ "d-m", —É–±–∏—Ä–∞—è –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
    start = f"{start_date.day}-{start_date.month}"
    end   = f"{end_date.day}-{end_date.month}"
    year = start_date.year
    priority_param = f"prioritydates={year}-{start}--{year}-{end}"

    url = f"https://www.afisha.ru/spb/events/{start}_{end}/"
    HEADERS = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/113.0.0.0 Safari/537.36"
        )
    }

    response = requests.get(url, headers=HEADERS, timeout=10)
    if response.status_code != 200:
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    items = soup.find_all("div", {"data-test": "ITEM"})

    events: list[dict] = []
    for item in items:
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        title = item.get("aria-label") or (
            item.find("a", {"data-test": lambda x: x and "ITEM-NAME" in x})
            .get_text(strip=True)
        ) or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        # –°—Å—ã–ª–∫–∞
        a_tag = item.find("a", {"data-test": lambda x: x and "ITEM-URL" in x})
        link = a_tag["href"] if a_tag and a_tag.has_attr("href") else ""
        if link.startswith("/"):
            link = "https://www.afisha.ru" + link.rstrip("/")
        if link:
            link = link + (f"&{priority_param}" if "?" in link else f"/?{priority_param}")

        # –ü–†–û–ü–£–°–ö–ê–ï–ú –±–ª–æ–∫–∏ –±–µ–∑ —Å—Å—ã–ª–∫–∏
        if not link:
            continue

        # –¶–µ–Ω–∞
        ticket_tag = item.find("a", {"data-test": lambda x: x and "TICKET-BUTTON" in x})
        price = ticket_tag.get_text(strip=True) if ticket_tag else "–ù–µ—Ç —Ü–µ–Ω—ã"

        # –†–µ–π—Ç–∏–Ω–≥
        rating_tag = item.find(attrs={"data-test": "RATING"})
        rating = rating_tag.get_text(strip=True) if rating_tag else "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_tag = item.find(
            "div",
            {"data-test": lambda x: x and "ITEM-META" in x and "ITEM-NOTICE" not in x}
        )
        category = category_tag.get_text(strip=True) if category_tag else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

        # –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        notice_tag = item.find("div", {"data-test": lambda x: x and "ITEM-NOTICE" in x})
        notice = notice_tag.get_text(strip=True) if notice_tag else ""

        events.append({
            "title": title,
            "link": link,
            "price": price,
            "rating": rating,
            "category": category,
            "notice": notice
        })

    return events
