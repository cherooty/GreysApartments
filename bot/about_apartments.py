from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
from aiogram import types

#router = Router()
router = Router(name="about_apartments_spb")


# –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ FSM –∏–ª–∏ –ë–î)
user_state = {}

# --------------------–ù–ê–°–¢–†–û–ô–ö–ê –ú–ï–ù–Æ-----------------------------------------------------------
def main_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="booking")],
        [InlineKeyboardButton(text="üè° –û–± –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö", callback_data="about_apartments")],
        [InlineKeyboardButton(text="üíµ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ü–µ–Ω—ã", callback_data="availability")],
        [InlineKeyboardButton(text="üó∫Ô∏è –ì–∏–¥ –ø–æ –°–ü–±", callback_data="guide")],
        [InlineKeyboardButton(text="‚ùì FAQ –∏ –ø–æ–º–æ—â—å", callback_data="faq")]
    ])

def apartments_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üå∫ –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã ¬´–ú–∞–∫–∏¬ª", callback_data="apt_maki"),
            InlineKeyboardButton(text="üé∑ –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã ¬´–ë–ª—é–∑¬ª", callback_data="apt_blues")
        ],
        [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", callback_data="rules")],
        [InlineKeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —É—Å–ª–æ–≤–∏—è", callback_data="pricing")]
    ])

def apartment_detail_kb(apartment):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üì∏ –§–æ—Ç–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ {apartment}", callback_data=f"photos_{apartment.lower()}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_apartments")],
        #[InlineKeyboardButton(text="üì• –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")]
    ])

def maki_detail_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÜ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ, –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="booking_maki")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_apartments")]
    ])

def blues_detail_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÜ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ, –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="booking_blues")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_apartments")]
    ])
#-----------------------------------------------------------------------------------------------------------------------

@router.message(F.text == "üìã –û–± –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö")

@router.callback_query(F.data == "about_apartments")
async def about_apartments(event):
    url = "https://docs.google.com/document/d/1jXjnvGqWk71aV-9NgOzPK5NUY5vCAVj8_JdRAbHrwqo/export?format=txt"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    doc_text = await response.text()
                else:
                    doc_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–ø–∞—Ä—Ç-–æ—Ç–µ–ª—è."
    except Exception:
        doc_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è."

    if isinstance(event, types.Message):
        await event.answer(doc_text.strip())
        await event.answer("–û —á—ë–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?", reply_markup=apartments_kb())
    else:
        await event.message.answer(doc_text.strip())
        await event.message.answer("–û —á—ë–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?", reply_markup=apartments_kb())

# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã "–ú–∞–∫–∏"
@router.callback_query(F.data == "apt_maki")
async def show_maki(callback: CallbackQuery):
    # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏—Ç—É–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
    await callback.message.answer_photo(
        photo="AgACAgIAAxkBAAPXaGWVrD9zSEYbp6iWlH8DBixMBuEAAijyMRtutChL8Vdqs_QmwkQBAAMCAAN5AAM2BA",
        caption="üå∫ –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã ¬´–ú–∞–∫–∏¬ª"
    )
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Google Docs
    url = "https://docs.google.com/document/d/1PcNpUgMSdc9uVW77FhHJmeZTlOb9iXn9QIgoQvW_Zb8/export?format=txt"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    text = await response.text()
                else:
                    text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ ¬´–ú–∞–∫–∏¬ª."
    except Exception:
        text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è."

    # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ + –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    await callback.message.answer(text.strip(), reply_markup=maki_detail_kb())
    #await callback.message.edit_text(text.strip(), reply_markup=apartment_detail_kb("–ú–∞–∫–∏"))

# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã "–ë–ª—é–∑"


@router.callback_query(F.data == "apt_blues")
async def show_blues(callback: CallbackQuery):
    # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏—Ç—É–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
    await callback.message.answer_photo(
        photo="AgACAgIAAxkBAAPxaGWd7mNdPQHQvRqnZu2eI8oQC8cAAmb9MRvqIyhLCXgYK7Wxc_wBAAMCAAN5AAM2BA",
        caption="üé∑ –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã ¬´–ë–ª—é–∑¬ª"
    )

    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Google Docs
    url = "https://docs.google.com/document/d/14lmYVV3Vouoc7LWISzkLhUKNVlacau8UCWAKCbg-HPw/export?format=txt"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                text = await response.text() if response.status == 200 else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."
    except Exception:
        text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è."

    # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(text.strip(), reply_markup=blues_detail_kb())



@router.callback_query(F.data.startswith("photos_"))
async def show_photos(callback: CallbackQuery):
    await callback.message.edit_text(
        "üì∏ –§–æ—Ç–æ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—é.",
        reply_markup=apartments_kb()
    )

@router.callback_query(F.data == "back_main")
@router.callback_query(F.data == "to_main")
async def to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu_kb()
    )

@router.callback_query(F.data == "back_apartments")
async def back_apartments(callback: CallbackQuery):
    await about_apartments(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ, –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è "–ú–∞–∫–∏"
@router.callback_query(F.data == "booking_maki")
async def show_booking_maki(callback: CallbackQuery):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π
    await callback.message.edit_text(
        "üì∏ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:\n\n"
        "üëâ <a href='https://homereserve.ru/AABlHg'>–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</a>\n\n"
        "–í—ã –ø–µ—Ä–µ–π–¥—ë—Ç–µ –Ω–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ç–æ, —Ü–µ–Ω–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π ¬´–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_apartments")]
        ]),
        disable_web_page_preview=False
    )

@router.callback_query(F.data == "booking_blues")
async def show_booking_blues(callback: CallbackQuery):
    await callback.message.edit_text(
        "üì∏ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:\n\n"
        "üëâ <a href='https://homereserve.ru/AABlHg'>–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</a>\n\n"
        "–í—ã –ø–µ—Ä–µ–π–¥—ë—Ç–µ –Ω–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ç–æ, —Ü–µ–Ω–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π ¬´–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_apartments")]
        ]),
        disable_web_page_preview=False
    )


# üîß REPLY-–µ–Ω—é: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
# –°–µ–π—á–∞—Å –≤—ã–≤–æ–¥–∏—Ç –∑–∞–≥–ª—É—à–∫—É, –≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–±–æ—Ä–∞ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data == "booking")
async def show_booking_placeholder(callback: CallbackQuery):
    await callback.message.edit_text(
        "üîß –¢—É—Ç –±—É–¥–µ—Ç –º–æ–¥—É–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã, –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.",
        reply_markup=main_menu_kb()
    )


# üîò –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è" –∏ "–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —É—Å–ª–æ–≤–∏—è"
# –ó–∞–≥—Ä—É–∂–∞—é—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö Google Docs
@router.callback_query(F.data == "rules")
async def show_rules(callback: CallbackQuery):
    url = "https://docs.google.com/document/d/1owXB8gj_gXOMXfA_zg8KhUhzz3K24BroDGCSAMi9knc/export?format=txt"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                text = await response.text() if response.status == 200 else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è."
    except Exception:
        text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."

    await callback.message.edit_text(text.strip(), reply_markup=apartments_kb())

@router.callback_query(F.data == "pricing")
async def show_pricing(callback: CallbackQuery):
    url = "https://docs.google.com/document/d/1aIgmCAacPGXQGgtxAy6bQDBjVaH_nCuF5g3YuK9zmus/export?format=txt"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                text = await response.text() if response.status == 200 else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."
    except Exception:
        text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."

    await callback.message.edit_text(text.strip(), reply_markup=apartments_kb())

"""# ‚¨áÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id –æ—Ç Telegram
@router.message(F.photo)
async def catch_photo(message: Message):
    file_id = message.photo[-1].file_id
    print("üì∏ file_id:", file_id)
    await message.answer(f"‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! file_id:\n<code>{file_id}</code>")
"""
